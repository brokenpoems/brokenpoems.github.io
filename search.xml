<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OJ(Online Judge)的常见错误代码</title>
    <url>/2020/08/12/OJ(Online%20Judge)%E7%9A%84%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<!--markdown-->
<p>#OJ(Online Judge)的常见错误代码<br>| 简写|  英文原意 |中文翻译|<br>| :————: | :————: | :————: |<br>|OJ|Online Judge|在线评测系统|<br>|CE|Compile Error|编译错误|<br>|Judging|Judging…|评测中|<br>|RE|Runtime Error|运行时错误|<br>|TLE|Time Limit Exceeded|超出时间限制|<br>|MLE|Memory Limit Exceeded|超出内存限制|<br>|ILE|Idleness Limit Exceeded|超出懒惰限制=。=|<br>|OLE|Output Limit Exceeded|超出输出限制|<br>|UKE|Unknown Error|未知错误|<br>|WA|Wrong Answer|答案错误|<br>|PC|Partially Correct|部分正确|<br>|AC|Accepted|答案正确|<br>|PE|Presentation Error|输出格式错误|<br>|DoJ|Denial of Judge|拒绝评测|<br>|SJE|Special Judg Error|特判错误|<br>|Au|Aurum|金的！|<br>|Ag|Argentum|银的!|<br>|Cu|Cuprum|铜的!|<br>|JF|查了一中午不查了=。=|=。=|<br>|RF|Restricted Function|使用了不安全的函数|<br>|SE|System Error|系统错误|<br><img src="https://brokenpoems.cf/usr/uploads/2020/08/2185073623.jpg" alt="OJ.jpg"><br>参考链接:<br>1.<a href="https://brokenpoems.cf/index.php/go/012/" title="洛谷---各个评测状态">洛谷—各个评测状态</a><br>2.<a href="https://brokenpoems.cf/index.php/go/011/" title="关于在OJ中常见的错误">关于在OJ中常见的错误</a><br>3.<a href="https://brokenpoems.cf/index.php/go/010/" title="OJ术语: AC、WA、TLE、OLE、MLE、RE、PE、CE">OJ术语: AC、WA、TLE、OLE、MLE、RE、PE、CE</a><br>4.<a href="https://brokenpoems.cf/index.php/go/003/" title="OJ（Online Judge）常见错误提示">OJ（Online Judge）常见错误提示</a><br>5.<a href="https://brokenpoems.cf/index.php/go/002/" title="UKE_百度百科">UKE_百度百科</a></p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OJ</tag>
      </tags>
  </entry>
  <entry>
    <title>Welcome to Nothing...</title>
    <url>/2020/07/21/Welcome%20to%20Nothing.../</url>
    <content><![CDATA[<!--markdown-->
<p>#Hello World</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;hello World!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>:yum:</p>
]]></content>
      <categories>
        <category>Something</category>
      </categories>
  </entry>
  <entry>
    <title>二分法求解</title>
    <url>/2020/08/12/%E4%BA%8C%E5%88%86%E6%B3%95%E6%B1%82%E8%A7%A3/</url>
    <content><![CDATA[<!--markdown-->
<p>##二分<br><font color=#008000><del>没为啥就是想写了</del></font><br><strong>模板</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> l=beign,r=end;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)<span class="comment">/*while(r-l&lt;eps)*/</span>&#123;</span><br><span class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(check(mid))&#123;</span><br><span class="line">		l=mid+<span class="number">1</span>;<span class="comment">//r=mid-1;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		r=mid<span class="number">-1</span>;<span class="comment">//l=mid-1;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=l;</span><br></pre></td></tr></table></figure>
<p>####用处:<br>1.在某情况成立的情况下,其规模更大或其规模更小的情况也成立,就可以用二分法求ans<br>2.与其他算法结合,并非检查的函数check,而是e.g.：A-B problemの排序去重二分查找=。=<br>####时间复杂度<br>$O(log_2n)$<br>####应用<br>1.快速幂和快速乘</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">quick_pow</span><span class="params">(T a,T b,T c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">1</span>;<span class="comment">//attention!</span></span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%c;</span><br><span class="line">		a*=a%c;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">quick_mul</span><span class="params">(T a,T b,T c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;<span class="comment">//attention!</span></span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=(res+a)%c</span><br><span class="line">		a=(a+a)%c;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Something</category>
      </categories>
  </entry>
  <entry>
    <title>关于一次使用Github fork库并使用gnupg提交至github&amp;pull requests的经历</title>
    <url>/2020/10/22/%E5%85%B3%E4%BA%8E%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Github%20fork%E5%BA%93%E5%B9%B6%E4%BD%BF%E7%94%A8gnupg%E6%8F%90%E4%BA%A4%E8%87%B3github&amp;pull%20requests%E7%9A%84%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<!--markdown-->
<p>#起因<br>由于sublime-CoolFormat作者对其他衍生语言(e.g:Json(sublime),C improved)等的文件删除bug<br>见issue(#12,#4),我查看了源代码并进行了稍许修改<br><img src="https://brokenpoems.cf/usr/uploads/2020/10/2769271191.png" alt="head.png"><br>#经过<br>为了作者可以看到并修改我的意见,我决定使用pull requests 提交<del>实际上是想要有贡献=。=</del>,而最近又研究了GnuPG的密钥,GitHub又支持PGP密钥,为了commit的”小绿锁”我使用了PGP密钥<br>由于我校新机房由于特殊原因<del>高考资料</del>停用,我们只得使用旧机房—WindowsXP系统emmm……<br>于是,我使用的gpg4win是v2.3.4版的，gpg v2.0.30 T^T，git v2.10.0-32-bit</p>
<p>##git 配置</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name &lt;username of github&gt;</span><br><span class="line">git config --global user.email &lt;email of github&gt;</span><br><span class="line">git config --global commit.gpgsign <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p> <del>实际上username of github和可以随便,但要上传到Github上,so,使用username of github</del></p>
<p>##gpg4win安装注意事项</p>
<p> 不要装在%PROGARMFILES%等路径中有空格和中文的地方!!!<br>ps:WinXP要无空格，Win10实测不用</p>
<p>##生成PGP密钥(对bash窗口过敏者慎用)<br>题外话:gpg汉化只要将…\GNU\GnuPG\share\locale\zh_CN 改成 zh就OK了<br><img src="https://brokenpoems.cf/usr/uploads/2020/10/2850637255.png" alt="rename.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg --gen-key</span><br></pre></td></tr></table></figure>
<p><img src="https://brokenpoems.cf/usr/uploads/2020/10/3096991625.png" alt="answer.png"><br>然后输入密码,之后疯狂移动鼠标，效果如下:<br><img src="https://brokenpoems.cf/usr/uploads/2020/10/262257880.png" alt="result.png"><br>然后就可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg [--keyserver &lt;keyserver&gt;] --send-key &lt;username&gt;</span><br></pre></td></tr></table></figure>
<p>上传到公钥服务器上了<br>国内可用公钥服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pgp.mit.edu(卡...)</span><br><span class="line">keys.gnupg.net</span><br><span class="line">subkeys.pgp.net</span><br><span class="line">pool.sks-keyservers.net</span><br><span class="line">zimmermann.mayfirst.org</span><br><span class="line">keyserver.ubuntu.com</span><br></pre></td></tr></table></figure>
<p>Attention!</p>
<ul>
<li>请记好你的密码,使用如下命令导出公钥和私钥:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">公钥:gpg -a --<span class="built_in">export</span> &lt;username&gt; -o &lt;filename of publickey&gt;</span><br><span class="line">私钥:gpg -a --export-secret-key &lt;username&gt; -o &lt;filename of secretkey&gt;</span><br></pre></td></tr></table></figure></li>
<li>请生成一份吊销证书防止私钥丢失,公钥服务器上的公钥没法删除<del>亲身经历…但我拿DiskGenius强找内存找回了…</del><br><img src="https://brokenpoems.cf/usr/uploads/2020/10/4156619645.png" alt="testuserrevoke.png"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg --gen-revoke &lt;username&gt;</span><br></pre></td></tr></table></figure></li>
<li>真实姓名和email<del>应该</del>和Github的username和email一致??</li>
</ul>
<p>###配置signingkey和gpg.program</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.signingkey &lt;刚才生成的Keyid&gt;</span><br><span class="line">git config --global gpg.program &lt;gpg.exe所在目录&gt;</span><br></pre></td></tr></table></figure>
<p>e.g:git config –global user.signingkey B18FDAD9<br>B18FDAD9是刚才testuser的keyid<br>也可以用subid:B2D7335D<br>也可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg -k [--keyid-format long]</span><br></pre></td></tr></table></figure>
<p>如使用–keyid-format long就是gpg keyid的16bit长格式:BC9378DFB18FDAD9<br>也就是Keyid可以使用B18FDAD9,B2D7335D和BC9378DFB18FDAD9</p>
<p>gpg.exe所在目录 再强调一次不能有空格(WinXP),我使用的目录是在C:\GnuPG\pub\gpg.exe</p>
<p>##开始gpg提交<br>###fork 库至Github的自己的库上<br>点一下 OK<br><img src="https://brokenpoems.cf/usr/uploads/2020/10/652142559.png" alt="fork.png"></p>
<p>###git clone至本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/&lt;git hub 用户名&gt;/&lt;库名&gt;.git</span><br></pre></td></tr></table></figure>
<p>###git checkout -b</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;newbarch&gt;</span><br></pre></td></tr></table></figure>
<p>建新分支<br>###进行修改<br>省略1000字…<br>###git add 修改文件<br>你要是懒也可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<p>###git commit<br>应该要求你输入密码了…<br>###git push</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>###去到github上的你的库<br>应该有了newbarch分支<br>###pull requests<br><img src="https://brokenpoems.cf/usr/uploads/2020/10/4036787519.png" alt="pull.png"><br>ps: git 配置代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy socks5://127.0.0.1:1080 </span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<p>记住Git push的密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Something</category>
      </categories>
  </entry>
  <entry>
    <title>别像弱智一样提问(Stop Ask Questions The Stupid Ways)</title>
    <url>/2020/07/21/%E5%88%AB%E5%83%8F%E5%BC%B1%E6%99%BA%E4%B8%80%E6%A0%B7%E6%8F%90%E9%97%AE(Stop%20Ask%20Questions%20The%20Stupid%20Ways)/</url>
    <content><![CDATA[<!--markdown-->
<h1 id="别像弱智一样提问"><a href="#别像弱智一样提问" class="headerlink" title="别像弱智一样提问"></a>别像弱智一样提问</h1><p>Stop Ask Questions The Stupid Ways</p>
<h2 id="你真的准备好了吗？"><a href="#你真的准备好了吗？" class="headerlink" title="你真的准备好了吗？"></a>你真的准备好了吗？</h2><p><img src="https://brokenpoems.cf/usr/uploads/2020/07/1715435248.png" alt="you-are-not-prepared.png"></p>
<blockquote>
<p>感谢群友 <code>for you</code> 提供</p>
</blockquote>
<h2 id="提问前你必须需要知道的事情"><a href="#提问前你必须需要知道的事情" class="headerlink" title="提问前你必须需要知道的事情"></a>提问前你必须需要知道的事情</h2><ol>
<li>要知道， <code>Free</code> 的正确翻译是 <code>自由</code>，而非 **<del><code>免费</code></del>**。</li>
<li>要知道，愿意回答问题的人，都是 <strong>可爱</strong> 的人。</li>
<li>要知道，向帮助你的人 <code>付费</code> 是一个高尚的行为。即使回答你的人不是为了钱。</li>
<li>要知道，<code>花钱买时间一个是常识</code>。如果你不能认同，要么你钱包穷，要么你思想穷。</li>
<li>要知道，给对方发工资的不是你或者你老板。</li>
<li>要知道，提问的时候你才是 <strong>孙子</strong>，帮助你的人是 <strong>大爷</strong>。</li>
<li>要知道，不回答你的问题对其他人没有任何损失。</li>
<li>要知道，<code>准确描述一件事情</code>是一项基本生存技能。要学会 <a href="https://brokenpoems.cf/index.php/archives/5/">《提问的智慧》</a></li>
<li>要知道，<code>搜索</code>是一项基本生存技能，学不会用 Google 的话，你可能真的不适合你所从事的行业。</li>
<li>要知道，<code>英文</code>是一项基本生存技能，不认识英文的话，你可能真的不适合你所从事的行业。</li>
</ol>
<h2 id="幼儿园的小朋友都知道要有礼貌"><a href="#幼儿园的小朋友都知道要有礼貌" class="headerlink" title="幼儿园的小朋友都知道要有礼貌"></a>幼儿园的小朋友都知道要有礼貌</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请问</span><br><span class="line">  ...问题描述...</span><br><span class="line">谢谢</span><br></pre></td></tr></table></figure>

<p><img src="https://brokenpoems.cf/usr/uploads/2020/07/2132356464.jpg" alt="manners-maketh-man.jpg"></p>
<h2 id="学会描述问题"><a href="#学会描述问题" class="headerlink" title="学会描述问题"></a>学会描述问题</h2><blockquote>
<p>向别人提问的时候，要学会正确的描述问题。<br>把对方当成你的老板，你在给他提做报告。要用最精炼的文字和图片，向对方阐述明白一个事情的来龙去脉。</p>
</blockquote>
<blockquote>
<p><strong>要知道，你不是我追的妹子，我没有时间来猜你想要什么。</strong></p>
</blockquote>
<blockquote>
<p>记住，给别人的条件越多，你的问题解决越快。因为这不是解密游戏。</p>
</blockquote>
<ol>
<li>请问一个关于 <code>什么</code> 的问题。</li>
<li>我想要达到 <code>什么样</code> 效果，但是我这样做出现了 <code>什么样</code> 的问题。</li>
<li>报错日志是 <code>这样</code> 的。（要 <code>学会</code> 画关键字）</li>
<li>我尝试过 <code>什么</code> 方法来解决。</li>
<li>我尝试搜索过了 <code>什么</code> 关键字，在里面找到了 <code>这些 URL</code> 的回答，尝试了还是没有解决问题。</li>
<li>我用的是 <code>什么</code> 操作系统，版本号是多少。</li>
<li>我用的是 <code>什么</code> 软件，版本号是多少。</li>
<li>谢谢</li>
</ol>
<blockquote>
<p>千万别认为只有别人帮助你之后才需要说 <code>谢谢</code>。</p>
</blockquote>
<h3 id="学会什么时候贴图"><a href="#学会什么时候贴图" class="headerlink" title="学会什么时候贴图"></a>学会什么时候贴图</h3><p><img src="https://brokenpoems.cf/usr/uploads/2020/07/1018762986.png" alt="what-time-to-use-image.png"></p>
<p>像这种，IM 自动转义表情，贴出来的问题全是表情。</p>
<h3 id="学会什么时候要圈出重点"><a href="#学会什么时候要圈出重点" class="headerlink" title="学会什么时候要圈出重点"></a>学会什么时候要圈出重点</h3><p>千万不要认为别人的频率和你是同步的，然后像这样扔出一张图一个表情就了事了。</p>
<p>在工作中， 你<code>@</code>的人可能会多问一句什么情况。 但是在 IM 聊天群里面，就没有这么好运气了。</p>
<p><img src="https://brokenpoems.cf/usr/uploads/2020/07/460509895.png" alt="stupid_02-conversation.png"></p>
<p>如下很难吗？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@xxx，我这边访问不了 git 仓库。</span><br><span class="line">环境是: 环境是什么。</span><br></pre></td></tr></table></figure>

<p><img src="https://brokenpoems.cf/usr/uploads/2020/07/805641133.png" alt="stupid_02-no-target.png"></p>
<h3 id="学会什么时候贴文字"><a href="#学会什么时候贴文字" class="headerlink" title="学会什么时候贴文字"></a>学会什么时候贴文字</h3><h2 id="什么是弱智一样的提问"><a href="#什么是弱智一样的提问" class="headerlink" title="什么是弱智一样的提问"></a>什么是弱智一样的提问</h2><p><img src="https://brokenpoems.cf/usr/uploads/2020/07/1461368315.png" alt="stupid_questions.png"></p>
<h2 id="萌新滚粗"><a href="#萌新滚粗" class="headerlink" title="萌新滚粗"></a>萌新滚粗</h2><p><img src="https://brokenpoems.cf/usr/uploads/2020/07/1936073238.jpg" alt="baiduit.jpg"></p>
<table>
<thead>
<tr>
<th>什么鬼？</th>
<th>咋回事？</th>
<th>怎么办？</th>
<th>救命啊！！</th>
</tr>
</thead>
<tbody><tr>
<td>自己 google</td>
<td>自己 google</td>
<td>自己 google</td>
<td>自己 google 了吗</td>
</tr>
</tbody></table>
<p><img src="https://brokenpoems.cf/usr/uploads/2020/07/517507581.png" alt="googleit.png"><br>转载自GitHub:<a href="https://brokenpoems.cf/index.php/go/004/">别像弱智一样提问</a></p>
]]></content>
      <categories>
        <category>Something</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title>原码,补码&amp;反码</title>
    <url>/2020/07/22/%E5%8E%9F%E7%A0%81,%E8%A1%A5%E7%A0%81&amp;%E5%8F%8D%E7%A0%81/</url>
    <content><![CDATA[<!--markdown-->
<h2 id="原码-补码-amp-反码"><a href="#原码-补码-amp-反码" class="headerlink" title="#原码,补码&amp;反码"></a>#原码,补码&amp;反码</h2><blockquote>
<p>以下皆以C++char的存储(8位二进制位存储)</p>
</blockquote>
<ul>
<li>原码<br>原码=<strong>符号位+值</strong></li>
</ul>
<p><strong><em>e.g.</em></strong>:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">8的原码=00001000;</span><br><span class="line">-8的原码=10001000;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>反码</li>
</ul>
<p><strong><del>baike:</del></strong><br>反码通常是用来由原码求补码或者由补码求原码的过渡码！<br>反码=二进制位对每一位取反</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">8的反码=11110111;</span><br><span class="line">-8的反码=01110111;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>补码</li>
</ul>
<p><strong><del>baike:</del></strong><br>假设当前时针指向8点，而准确时间是6点，调整时间可有以下两种拨法：一种是倒拨2小时，即8-2=6；另一种是顺拨10小时，8+10=12+6=6，即8-2=8+10=8+12-2(mod 12)．在12为模的系统里，加10和减2效果是一样的，因此凡是减2运算，都可以用加10来代替。若用一般公式可表示为：a-b=a-b+mod=a+mod-b。对“模”而言，2和10互为补数。实际上，以12为模的系统中，11和1，8和4，9和3，7和5，6和6都有这个特性，共同的特点是两者相加等于模。对于计算机，其概念和方法完全一样。n位计算机，设n=8，所能表示的最大数是11111111，若再加1成100000000(9位)，但因只有8位，最高位1自然丢失。又回到了 00000000，所以8位二进制系统的模为 。在这样的系统中减法问题也可以化成加法问题，只需把减数用相应的补数表示就可以了。把补数用到计算机对数的处理上，就是补码</p>
<hr>
<ol>
<li>正数<br>补码=原码；</li>
<li>负数<br>补码=相反数的反码+1；</li>
<li>0<br>补码=0；<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">8的补码=00001000;</span><br><span class="line">-8的补码=11110111+1=11111000;</span><br></pre></td></tr></table></figure>
参考资料:<br><a href="https://brokenpoems.cf/index.php/go/006/" title="反码">反码_百度百科</a><br><a href="https://brokenpoems.cf/index.php/go/007/" title="补码">补码_百度百科</a><br><a href="https://brokenpoems.cf/index.php/go/008/" title="原码">原码_百度百科</a></li>
</ol>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
  </entry>
  <entry>
    <title>图染色</title>
    <url>/2020/10/04/%E5%9B%BE%E6%9F%93%E8%89%B2/</url>
    <content><![CDATA[<!--markdown-->
<p>给定一个有 NN 个节点和 MM 条边的无向图，节点编号为 <strong>１～ｎ</strong></p>
<p>你需要将每个节点染成黑色或者白色两种颜色之一。接下来会根据节点的颜色 来生成所有边的颜色。每条边连接两个节点，只有其中一个节点是黑色、另一个节点是白色时该边会被染成黑色，否则该边会被染成白色。</p>
<p>请你求出，有多少条边满足，存在一种对于节点染色的方案，使得只有这条边是白色，其它 M - 1M?1 条边都是黑色。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行两个空格分隔的正整数 $$N,M$$。</p>
<p>接下来 M 行，第 i 行有两个空格分隔的正整数 $$A_i ,B_i (A_i != B_i)$$</p>
<p>不保证图是连通的，也不保证没有重边。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一行一个整数，代表答案。</p>
<h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>对于所有测试数据，<br>$$<br>2 ≤ N ≤ 10^5, 1 ≤ M ≤ 2 \times 10_5<br>2≤N≤10<br>$$</p>
<p>输出时每行末尾的多余空格，不影响答案正确性<br>要求使用「文件输入输出」的方式解题，输入文件为 <code>coloring.in</code>，输出文件为 <code>coloring.out</code><br><strong>样例输入1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 5</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 4</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure>
<p><strong>样例输出1</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<p><strong>样例解释1</strong><br>只有第三条边满足条件，方案为:将节点 11 和 44 染成白色，节点 22 和 33 染成黑色(如下图，用虚线表示白色的边;下同)。</p>
<p><strong>样例输入2</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 2</span><br><span class="line">4 3</span><br></pre></td></tr></table></figure>
<p><strong>样例输出2</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<p><strong>样例解释2</strong><br>只有第一条或第四条边满足条件(如下图)。</p>
<p><strong>样例输入3</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13 16</span><br><span class="line">1 6</span><br><span class="line">2 6</span><br><span class="line">3 1</span><br><span class="line">3 2</span><br><span class="line">4 7</span><br><span class="line">4 7</span><br><span class="line">5 9</span><br><span class="line">6 5</span><br><span class="line">8 2</span><br><span class="line">8 13</span><br><span class="line">9 11</span><br><span class="line">10 3</span><br><span class="line">11 10</span><br><span class="line">11 12</span><br><span class="line">12 8</span><br><span class="line">13 6</span><br></pre></td></tr></table></figure>
<p><strong>样例输出3</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>


<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#define NoFile</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ciso646&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ios&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iosfwd&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;istream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;streambuf&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILENAME coloring</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> strdef(arg) #arg</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> strdef2(arg) strdef(arg)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFILE strdef2(FILENAME.in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUTFILE strdef2(FILENAME.out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> asm asm</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> auto auto</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> bool bool</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> break break</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> case case</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> catch catch</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char char</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> class class</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> const const</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> const_cast const_cast</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> continue continue</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> default default</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> delete delete</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> do do</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> double double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dynamic_cast dynamic_cast</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">else</span> <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> enum enum</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> explicit explicit</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> export export</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> extern extern</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> false false</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> float float</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> for for</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> friend friend</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> goto goto</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">if</span> <span class="meta-keyword">if</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inline inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mutable mutable</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> namespace namespace</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> new new</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> operator operator</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> private private</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> protected protected</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> public public</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> register register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reinterpret_cast reinterpret_cast</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> return return</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> short short</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> signed signed</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sizeof sizeof</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> static static</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> static_cast static_cast</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> struct struct</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> switch switch</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> template template</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> this this</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> throw throw</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> true true</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> try try</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> typedef typedef</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> typeid typeid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> typename typename</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> union union</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unsigned unsigned</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> using using</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> virtual virtual</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> void void</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> volatile volatile</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wchar_t wchar_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> std std</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> brokenpoems brokenpoems</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> io</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">read</span><span class="params">(_tp&amp; tp)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">char</span> ch = getchar(),opt = tp = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">			<span class="keyword">if</span>(EOF == ch)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			opt |= (<span class="string">&#x27;-&#x27;</span> == ch);</span><br><span class="line">			ch = getchar();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">			tp = (tp &lt;&lt; <span class="number">1</span>) + (tp &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">			ch = getchar();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(opt)tp = -tp;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">const</span> _tp&amp; tp)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(tp &lt; <span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),out(-tp);</span><br><span class="line">		<span class="keyword">else</span> (tp &gt; <span class="number">9</span>) ? (out(tp / <span class="number">10</span>)) : ((<span class="keyword">void</span>)<span class="literal">NULL</span>),<span class="built_in">putchar</span>(tp % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> brokenpoems</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> io;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">7</span>,maxm= <span class="number">4e5</span> + <span class="number">7</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Map</span> &#123;</span></span><br><span class="line">		<span class="keyword">int</span> e_size,n,m,id,time;</span><br><span class="line">		<span class="keyword">int</span> head[maxn],col[maxn],low[maxn];</span><br><span class="line">		<span class="keyword">int</span> dfn[maxn],sum[maxn],dep[maxn];</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">			<span class="keyword">int</span> next,to;</span><br><span class="line">			edge(<span class="keyword">int</span> a = <span class="number">0</span>,<span class="keyword">int</span> b = <span class="number">0</span>):next(a),to(b) &#123;&#125;</span><br><span class="line">		&#125; e[maxm];</span><br><span class="line">		Map()&#123;</span><br><span class="line">			e_size=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			read(n),read(m);</span><br><span class="line">			<span class="keyword">int</span> x,y;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">				read(x),read(y);</span><br><span class="line">				add_edge(x,y);</span><br><span class="line">				add_edge(y,x);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">			e[++e_size]=edge(head[from],to);</span><br><span class="line">			head[from]=e_size;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">bool</span> flg = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = head[x]; i; i=e[i].next) &#123;</span><br><span class="line">				<span class="keyword">if</span>(!col[e[i].to]) &#123;</span><br><span class="line">					col[e[i].to] = <span class="number">3</span> - col[x];</span><br><span class="line">					flg |= check(e[i].to);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					flg |= col[e[i].to] == col[x];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> flg;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">coloring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			id = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span>(!col[i]) &#123;</span><br><span class="line">					col[i] = <span class="number">1</span>;</span><br><span class="line">					<span class="keyword">if</span>(check(i)) &#123;</span><br><span class="line">						<span class="keyword">if</span>(!id) id = i;</span><br><span class="line">						<span class="keyword">else</span> &#123;</span><br><span class="line">							<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">							<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> eid)</span> </span>&#123;</span><br><span class="line">			dfn[x] = low[x] = ++time;</span><br><span class="line">			<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = head[x]; i; i=e[i].next) &#123;</span><br><span class="line">				<span class="keyword">if</span>(i == eid)<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(!dfn[e[i].to])res += tarjan(e[i].to,i ^ <span class="number">1</span>);</span><br><span class="line">				low[x] = min(low[x],low[e[i].to]);</span><br><span class="line">				<span class="keyword">if</span>(low[e[i].to] &gt; dfn[x])res++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> res;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> eid)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">			dep[x] = dep[e[eid].to] + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = head[x]; i ; i = e[i].next) &#123;</span><br><span class="line">				<span class="keyword">if</span>(i != eid) &#123;</span><br><span class="line">					<span class="keyword">if</span>(!dep[e[i].to]) &#123;</span><br><span class="line">						res += dfs(e[i].to,i ^ <span class="number">1</span>);</span><br><span class="line">						sum[x] += sum[e[i].to];</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span>(dep[e[i].to] &lt; dep[x]) &#123;</span><br><span class="line">						<span class="keyword">if</span>((dep[x] - dep[e[i].to]) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">							--sum[x];</span><br><span class="line">							++sum[e[i].to];</span><br><span class="line">						&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">							++sum[x];</span><br><span class="line">							--sum[e[i].to];</span><br><span class="line">							++res;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> res;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			init();</span><br><span class="line">			coloring();</span><br><span class="line">			<span class="keyword">if</span>(!id) &#123;</span><br><span class="line">				<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">					<span class="keyword">if</span>(!dfn[i])</span><br><span class="line">						cnt += tarjan(i,<span class="number">0</span>);</span><br><span class="line">				out(cnt);</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt; id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">int</span> cnt = dfs(id,<span class="number">0</span>),ans = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">					ans += sum[i] == cnt;</span><br><span class="line">				&#125;</span><br><span class="line">				out(ans + (cnt == <span class="number">1</span>));</span><br><span class="line">			<span class="comment">//	cout&lt;&lt; id &lt;&lt;endl;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; M;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		M.Solve();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NoFile</span></span><br><span class="line">	freopen(INFILE,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">	freopen(OUTFILE,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	brokenpoems::main();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Something</category>
      </categories>
  </entry>
  <entry>
    <title>线段树和树状数组</title>
    <url>/2020/09/06/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%92%8C%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<!--markdown-->
<p>#线段树(Segment Tree)<br>baike?:线段树(Segment Tree)是一种<font color="Gold">二叉查找树</font>（，与<font color="Gold">区间树</font>相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。<br>!:<font color="Gold">区间树</font>：区间树是在平衡树基础上进行扩展得到的支持以区间为元素的动态集合的操作，其中每个节点的关键值是区间的左端点。<br>!:<font color="Gold">二叉查找树</font>（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。二叉搜索树作为一种经典的数据结构，它既有链表的快速插入与删除操作的特点，又有数组快速查找的优势；所以应用十分广泛，例如在文件系统和数据库系统一般会采用这种数据结构进行高效率的排序与检索操作。<br>首先，线段树比较难<br>其次，线段树很重要<br>最后，如果你是想来看有什么可以学的，就去其他博客看看吧。<font color="Azure">我只是一个菜鸟。。</font><br>这里以求一段区间的最大值来建立线段树。。<br>数据规模最大为v不超过int,区间不超过1e5</p>
<ol>
<li>线段树结构</li>
</ol>
<p>-&gt;一个数据结构的基础。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>,inf=<span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">int</span> value[maxn];</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> U,<span class="keyword">typename</span> T&gt;                         <span class="comment">//U是区间单位,T是节点值</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree_Node</span> &#123;</span></span><br><span class="line">        U l,r;                                             <span class="comment">//l:左起始点,r:右终点</span></span><br><span class="line">        T v;                                               <span class="comment">//v:当前节点的值</span></span><br><span class="line">        <span class="comment">//T lazy_tag;                                      //懒标记底下写</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> U,<span class="keyword">typename</span> T&gt;                         <span class="comment">//U是区间单位,T是节点值</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Segment_Tree</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> T <span class="title">Max</span><span class="params">(T a,T b)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a&gt;b)?a:b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Chan</span><span class="params">(T&amp; a,T need)</span> </span>&#123;</span><br><span class="line">                a=need;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">typedef</span> Segment_Tree_Node&lt;U,T&gt; Node;               <span class="comment">//节点类型</span></span><br><span class="line">        <span class="function"><span class="keyword">typedef</span> <span class="title">T</span> <span class="params">(*fa_son)</span><span class="params">(T,T)</span></span>;                          <span class="comment">//父子关系函数</span></span><br><span class="line">        <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*CoF)</span><span class="params">(T&amp;,T)</span></span>;                         <span class="comment">//Change_one_function 单点修改函数</span></span><br><span class="line">        Node tree[<span class="number">4</span>*maxn];                                 <span class="comment">//未优化要开O(4*n),原因:自己画一颗</span></span><br><span class="line">        <span class="comment">//Node tree[2*maxn];                               //可用深搜优化空间复杂度至O(2*n)</span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">L</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tree[id].l;                         <span class="comment">//返回左区间</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">R</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tree[id].r;                         <span class="comment">//返回右区间</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> T&amp; <span class="title">V</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tree[id].v;                         <span class="comment">//返回当前节点值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Lson</span><span class="params">(<span class="keyword">int</span> id)</span><span class="keyword">const</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> id&lt;&lt;<span class="number">1</span>;                              <span class="comment">//左儿子编号</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Rson</span><span class="params">(<span class="keyword">int</span> id)</span><span class="keyword">const</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> id&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;                            <span class="comment">//右儿子编号</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mid</span><span class="params">(<span class="keyword">int</span> id)</span><span class="keyword">const</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (L(id)+R(id))&gt;&gt;<span class="number">1</span>;                   <span class="comment">//中间区间编号</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span>,U,U,fa_son fn=Max)</span></span>;                 <span class="comment">//建立线段树</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>,U,U)</span></span>;                                 <span class="comment">//单点查询</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">change_one</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,T,CoF=Chan,fa_son=Max)</span></span>;    <span class="comment">//单点修改</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,T,CoF=Chan,fa_son=Max)</span></span>;    <span class="comment">//区间修改</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>建立线段树<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> U,<span class="keyword">typename</span> T&gt;                         <span class="comment">//U是区间单位,T是节点值</span></span><br><span class="line"><span class="keyword">void</span> Segment_Tree&lt;U,T&gt;::build(<span class="keyword">int</span> id,U l,U r,fa_son) &#123;</span><br><span class="line">        L(id)=l;</span><br><span class="line">        R(id)=r;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">                V(id)=value[id];</span><br><span class="line">                <span class="comment">//cin&gt;&gt;tree[id].v;                          //可以直接读入因为是叶子节点是一个一个遍历过去的</span></span><br><span class="line">        &#125;</span><br><span class="line">        build(Lson(id),L(id),Mid(id));                      <span class="comment">//左子树</span></span><br><span class="line">        build(Rson(id),Mid(id)+<span class="number">1</span>,R(id));                    <span class="comment">//右子树,因为左移一位后id的二进制末位为0所以位或1后相当于+1</span></span><br><span class="line">        V(id)=fn(V(Lson(id)),V(Rson(id)));                  <span class="comment">//父节点与子节点的关系</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>单点查询<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> U,<span class="keyword">typename</span> T&gt;					<span class="comment">//U是区间单位,T是节点值 </span></span><br><span class="line"><span class="keyword">int</span> Segment_Tree&lt;U,T&gt;::find(<span class="keyword">int</span> id,U x,U y)&#123;</span><br><span class="line">	<span class="keyword">int</span> re=<span class="number">0</span>; 									<span class="comment">//返回值 </span></span><br><span class="line">	<span class="keyword">if</span>(L(id)&gt;=x&amp;&amp;R(id)&lt;=y)<span class="keyword">return</span> V(id);			<span class="comment">//如果这个区间在目标区间里面,直接返回这个区间的值,返回时会加进去 </span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(R(id)&lt;x||L(id)&gt;y) <span class="keyword">return</span> ~inf+<span class="number">1</span>; 	<span class="comment">//如果这个区间和目标区间毫不相干,因为这里要求最大值,so返回-inf </span></span><br><span class="line">	<span class="keyword">if</span>(R(Lson(id))&gt;=x) re+=find(Lson(id),x,y); 	<span class="comment">//如果这个区间的左儿子和目标区间有交集,那么搜索左儿子,不用else </span></span><br><span class="line">	<span class="keyword">if</span>(L(Rson(id))&lt;=y) re+=find(Rson(id),x,y); 	<span class="comment">//如果这个区间的右儿子和目标区间又交集,那么搜索右儿子,不用else </span></span><br><span class="line">	<span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>单点修改<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> U,<span class="keyword">typename</span> T&gt;					<span class="comment">//U是区间单位,T是节点值 </span></span><br><span class="line"><span class="keyword">void</span> Segment_Tree&lt;U,T&gt;::change_one(<span class="keyword">int</span> id,<span class="keyword">int</span> pos,T chan,CoF fn1,fa_son fn2) &#123;</span><br><span class="line">	<span class="keyword">if</span>(L(id)==R(id))&#123;							<span class="comment">//如果是叶子节点，那么说明找到了</span></span><br><span class="line">		fn1(V(id),chan);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;					</span><br><span class="line">	<span class="keyword">if</span>(pos&lt;=R(Lson(id)))change_one(Lson(id),pos,fn1,fn2);<span class="comment">//在左区间还是右区间 </span></span><br><span class="line">	<span class="keyword">else</span> change_one(Rson(id),id,fn1,fn2);</span><br><span class="line">	V(id)=fn(V(Lson(id)),V(Rson(id)));			<span class="comment">//返回更新</span></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Something</category>
      </categories>
  </entry>
  <entry>
    <title>颜色RGB参照表</title>
    <url>/2020/08/12/%E9%A2%9C%E8%89%B2RGB%E5%8F%82%E7%85%A7%E8%A1%A8/</url>
    <content><![CDATA[<!--markdown-->
<table class="reference notranslate"><tbody><tr><th align="left" width="25%">颜色名</th><th align="left" width="15%">HEX</th><th align="left" width="43%">Color</th></tr><tr><td align="left"><b>AliceBlue</b>&nbsp;</td><td align="left"><b>#F0F8FF</b></td><td bgcolor="#F0F8FF">&nbsp;</td></tr><tr><td align="left"><b>AntiqueWhite</b>&nbsp;</td><td align="left"><b>#FAEBD7</b></td><td bgcolor="#FAEBD7">&nbsp;</td></tr><tr><td align="left"><b>Aqua</b>&nbsp;</td><td align="left"><b>#00FFFF</b></td><td bgcolor="#00FFFF">&nbsp;</td></tr><tr><td align="left"><b>Aquamarine</b>&nbsp;</td><td align="left"><b>#7FFFD4</b></td><td bgcolor="#7FFFD4">&nbsp;</td></tr><tr><td align="left"><b>Azure</b>&nbsp;</td><td align="left"><b>#F0FFFF</b></td><td bgcolor="#F0FFFF">&nbsp;</td></tr><tr><td align="left"><b>Beige</b>&nbsp;</td><td align="left"><b>#F5F5DC</b></td><td bgcolor="#F5F5DC">&nbsp;</td></tr><tr><td align="left"><b>Bisque</b>&nbsp;</td><td align="left"><b>#FFE4C4</b></td><td bgcolor="#FFE4C4">&nbsp;</td></tr><tr><td align="left"><b>Black</b>&nbsp;</td><td align="left"><b>#000000</b></td><td bgcolor="#000000">&nbsp;</td></tr><tr><td align="left"><b>BlanchedAlmond</b>&nbsp;</td><td align="left"><b>#FFEBCD</b></td><td bgcolor="#FFEBCD">&nbsp;</td></tr><tr><td align="left"><b>Blue</b>&nbsp;</td><td align="left"><b>#0000FF</b></td><td bgcolor="#0000FF">&nbsp;</td></tr><tr><td align="left"><b>BlueViolet</b>&nbsp;</td><td align="left"><b>#8A2BE2</b></td><td bgcolor="#8A2BE2">&nbsp;</td></tr><tr><td align="left"><b>Brown</b>&nbsp;</td><td align="left"><b>#A52A2A</b></td><td bgcolor="#A52A2A">&nbsp;</td></tr><tr><td align="left"><b>BurlyWood</b>&nbsp;</td><td align="left"><b>#DEB887</b></td><td bgcolor="#DEB887">&nbsp;</td></tr><tr><td align="left"><b>CadetBlue</b>&nbsp;</td><td align="left"><b>#5F9EA0</b></td><td bgcolor="#5F9EA0">&nbsp;</td></tr><tr><td align="left"><b>Chartreuse</b>&nbsp;</td><td align="left"><b>#7FFF00</b></td><td bgcolor="#7FFF00">&nbsp;</td></tr><tr><td align="left"><b>Chocolate</b>&nbsp;</td><td align="left"><b>#D2691E</b></td><td bgcolor="#D2691E">&nbsp;</td></tr><tr><td align="left"><b>Coral</b>&nbsp;</td><td align="left"><b>#FF7F50</b></td><td bgcolor="#FF7F50">&nbsp;</td></tr><tr><td align="left"><b>CornflowerBlue</b>&nbsp;</td><td align="left"><b>#6495ED</b></td><td bgcolor="#6495ED">&nbsp;</td></tr><tr><td align="left"><b>Cornsilk</b>&nbsp;</td><td align="left"><b>#FFF8DC</b></td><td bgcolor="#FFF8DC">&nbsp;</td></tr><tr><td align="left"><b>Crimson</b>&nbsp;</td><td align="left"><b>#DC143C</b></td><td bgcolor="#DC143C">&nbsp;</td></tr><tr><td align="left"><b>Cyan</b>&nbsp;</td><td align="left"><b>#00FFFF</b></td><td bgcolor="#00FFFF">&nbsp;</td></tr><tr><td align="left"><b>DarkBlue</b>&nbsp;</td><td align="left"><b>#00008B</b></td><td bgcolor="#00008B">&nbsp;</td></tr><tr><td align="left"><b>DarkCyan</b>&nbsp;</td><td align="left"><b>#008B8B</b></td><td bgcolor="#008B8B">&nbsp;</td></tr><tr><td align="left"><b>DarkGoldenRod</b>&nbsp;</td><td align="left"><b>#B8860B</b></td><td bgcolor="#B8860B">&nbsp;</td></tr><tr><td align="left"><b>DarkGray</b>&nbsp;</td><td align="left"><b>#A9A9A9</b></td><td bgcolor="#A9A9A9">&nbsp;</td></tr><tr><td align="left"><b>DarkGreen</b>&nbsp;</td><td align="left"><b>#006400</b></td><td bgcolor="#006400">&nbsp;</td></tr><tr><td align="left"><b>DarkKhaki</b>&nbsp;</td><td align="left"><b>#BDB76B</b></td><td bgcolor="#BDB76B">&nbsp;</td></tr><tr><td align="left"><b>DarkMagenta</b>&nbsp;</td><td align="left"><b>#8B008B</b></td><td bgcolor="#8B008B">&nbsp;</td></tr><tr><td align="left"><b>DarkOliveGreen</b>&nbsp;</td><td align="left"><b>#556B2F</b></td><td bgcolor="#556B2F">&nbsp;</td></tr><tr><td align="left"><b>DarkOrange</b>&nbsp;</td><td align="left"><b>#FF8C00</b></td><td bgcolor="#FF8C00">&nbsp;</td></tr><tr><td align="left"><b>DarkOrchid</b>&nbsp;</td><td align="left"><b>#9932CC</b></td><td bgcolor="#9932CC">&nbsp;</td></tr><tr><td align="left"><b>DarkRed</b>&nbsp;</td><td align="left"><b>#8B0000</b></td><td bgcolor="#8B0000">&nbsp;</td></tr><tr><td align="left"><b>DarkSalmon</b>&nbsp;</td><td align="left"><b>#E9967A</b></td><td bgcolor="#E9967A">&nbsp;</td></tr><tr><td align="left"><b>DarkSeaGreen</b>&nbsp;</td><td align="left"><b>#8FBC8F</b></td><td bgcolor="#8FBC8F">&nbsp;</td></tr><tr><td align="left"><b>DarkSlateBlue</b>&nbsp;</td><td align="left"><b>#483D8B</b></td><td bgcolor="#483D8B">&nbsp;</td></tr><tr><td align="left"><b>DarkSlateGray</b>&nbsp;</td><td align="left"><b>#2F4F4F</b></td><td bgcolor="#2F4F4F">&nbsp;</td></tr><tr><td align="left"><b>DarkTurquoise</b>&nbsp;</td><td align="left"><b>#00CED1</b></td><td bgcolor="#00CED1">&nbsp;</td></tr><tr><td align="left"><b>DarkViolet</b>&nbsp;</td><td align="left"><b>#9400D3</b></td><td bgcolor="#9400D3">&nbsp;</td></tr><tr><td align="left"><b>DeepPink</b>&nbsp;</td><td align="left"><b>#FF1493</b></td><td bgcolor="#FF1493">&nbsp;</td></tr><tr><td align="left"><b>DeepSkyBlue</b>&nbsp;</td><td align="left"><b>#00BFFF</b></td><td bgcolor="#00BFFF">&nbsp;</td></tr><tr><td align="left"><b>DimGray</b>&nbsp;</td><td align="left"><b>#696969</b></td><td bgcolor="#696969">&nbsp;</td></tr><tr><td align="left"><b>DodgerBlue</b>&nbsp;</td><td align="left"><b>#1E90FF</b></td><td bgcolor="#1E90FF">&nbsp;</td></tr><tr><td align="left"><b>FireBrick</b>&nbsp;</td><td align="left"><b>#B22222</b></td><td bgcolor="#B22222">&nbsp;</td></tr><tr><td align="left"><b>FloralWhite</b>&nbsp;</td><td align="left"><b>#FFFAF0</b></td><td bgcolor="#FFFAF0">&nbsp;</td></tr><tr><td align="left"><b>ForestGreen</b>&nbsp;</td><td align="left"><b>#228B22</b></td><td bgcolor="#228B22">&nbsp;</td></tr><tr><td align="left"><b>Fuchsia</b>&nbsp;</td><td align="left"><b>#FF00FF</b></td><td bgcolor="#FF00FF">&nbsp;</td></tr><tr><td align="left"><b>Gainsboro</b>&nbsp;</td><td align="left"><b>#DCDCDC</b></td><td bgcolor="#DCDCDC">&nbsp;</td></tr><tr><td align="left"><b>GhostWhite</b>&nbsp;</td><td align="left"><b>#F8F8FF</b></td><td bgcolor="#F8F8FF">&nbsp;</td></tr><tr><td align="left"><b>Gold</b>&nbsp;</td><td align="left"><b>#FFD700</b></td><td bgcolor="#FFD700">&nbsp;</td></tr><tr><td align="left"><b>GoldenRod</b>&nbsp;</td><td align="left"><b>#DAA520</b></td><td bgcolor="#DAA520">&nbsp;</td></tr><tr><td align="left"><b>Gray</b>&nbsp;</td><td align="left"><b>#808080</b></td><td bgcolor="#808080">&nbsp;</td></tr><tr><td align="left"><b>Green</b>&nbsp;</td><td align="left"><b>#008000</b></td><td bgcolor="#008000">&nbsp;</td></tr><tr><td align="left"><b>GreenYellow</b>&nbsp;</td><td align="left"><b>#ADFF2F</b></td><td bgcolor="#ADFF2F">&nbsp;</td></tr><tr><td align="left"><b>HoneyDew</b>&nbsp;</td><td align="left"><b>#F0FFF0</b></td><td bgcolor="#F0FFF0">&nbsp;</td></tr><tr><td align="left"><b>HotPink</b>&nbsp;</td><td align="left"><b>#FF69B4</b></td><td bgcolor="#FF69B4">&nbsp;</td></tr><tr><td align="left"><b>IndianRed </b>&nbsp;</td><td align="left"><b>#CD5C5C</b></td><td bgcolor="#CD5C5C">&nbsp;</td></tr><tr><td align="left"><b>Indigo  </b>&nbsp;</td><td align="left"><b>#4B0082</b></td><td bgcolor="#4B0082">&nbsp;</td></tr><tr><td align="left"><b>Ivory</b>&nbsp;</td><td align="left"><b>#FFFFF0</b></td><td bgcolor="#FFFFF0">&nbsp;</td></tr><tr><td align="left"><b>Khaki</b>&nbsp;</td><td align="left"><b>#F0E68C</b></td><td bgcolor="#F0E68C">&nbsp;</td></tr><tr><td align="left"><b>Lavender</b>&nbsp;</td><td align="left"><b>#E6E6FA</b></td><td bgcolor="#E6E6FA">&nbsp;</td></tr><tr><td align="left"><b>LavenderBlush</b>&nbsp;</td><td align="left"><b>#FFF0F5</b></td><td bgcolor="#FFF0F5">&nbsp;</td></tr><tr><td align="left"><b>LawnGreen</b>&nbsp;</td><td align="left"><b>#7CFC00</b></td><td bgcolor="#7CFC00">&nbsp;</td></tr><tr><td align="left"><b>LemonChiffon</b>&nbsp;</td><td align="left"><b>#FFFACD</b></td><td bgcolor="#FFFACD">&nbsp;</td></tr><tr><td align="left"><b>LightBlue</b>&nbsp;</td><td align="left"><b>#ADD8E6</b></td><td bgcolor="#ADD8E6">&nbsp;</td></tr><tr><td align="left"><b>LightCoral</b>&nbsp;</td><td align="left"><b>#F08080</b></td><td bgcolor="#F08080">&nbsp;</td></tr><tr><td align="left"><b>LightCyan</b>&nbsp;</td><td align="left"><b>#E0FFFF</b></td><td bgcolor="#E0FFFF">&nbsp;</td></tr><tr><td align="left"><b>LightGoldenRodYellow</b>&nbsp;</td><td align="left"><b>#FAFAD2</b></td><td bgcolor="#FAFAD2">&nbsp;</td></tr><tr><td align="left"><b>LightGray</b>&nbsp;</td><td align="left"><b>#D3D3D3</b></td><td bgcolor="#D3D3D3">&nbsp;</td></tr><tr><td align="left"><b>LightGreen</b>&nbsp;</td><td align="left"><b>#90EE90</b></td><td bgcolor="#90EE90">&nbsp;</td></tr><tr><td align="left"><b>LightPink</b>&nbsp;</td><td align="left"><b>#FFB6C1</b></td><td bgcolor="#FFB6C1">&nbsp;</td></tr><tr><td align="left"><b>LightSalmon</b>&nbsp;</td><td align="left"><b>#FFA07A</b></td><td bgcolor="#FFA07A">&nbsp;</td></tr><tr><td align="left"><b>LightSeaGreen</b>&nbsp;</td><td align="left"><b>#20B2AA</b></td><td bgcolor="#20B2AA">&nbsp;</td></tr><tr><td align="left"><b>LightSkyBlue</b>&nbsp;</td><td align="left"><b>#87CEFA</b></td><td bgcolor="#87CEFA">&nbsp;</td></tr><tr><td align="left"><b>LightSlateGray</b>&nbsp;</td><td align="left"><b>#778899</b></td><td bgcolor="#778899">&nbsp;</td></tr><tr><td align="left"><b>LightSteelBlue</b>&nbsp;</td><td align="left"><b>#B0C4DE</b></td><td bgcolor="#B0C4DE">&nbsp;</td></tr><tr><td align="left"><b>LightYellow</b>&nbsp;</td><td align="left"><b>#FFFFE0</b></td><td bgcolor="#FFFFE0">&nbsp;</td></tr><tr><td align="left"><b>Lime</b>&nbsp;</td><td align="left"><b>#00FF00</b></td><td bgcolor="#00FF00">&nbsp;</td></tr><tr><td align="left"><b>LimeGreen</b>&nbsp;</td><td align="left"><b>#32CD32</b></td><td bgcolor="#32CD32">&nbsp;</td></tr><tr><td align="left"><b>Linen</b>&nbsp;</td><td align="left"><b>#FAF0E6</b></td><td bgcolor="#FAF0E6">&nbsp;</td></tr><tr><td align="left"><b>Magenta</b>&nbsp;</td><td align="left"><b>#FF00FF</b></td><td bgcolor="#FF00FF">&nbsp;</td></tr><tr><td align="left"><b>Maroon</b>&nbsp;</td><td align="left"><b>#800000</b></td><td bgcolor="#800000">&nbsp;</td></tr><tr><td align="left"><b>MediumAquaMarine</b>&nbsp;</td><td align="left"><b>#66CDAA</b></td><td bgcolor="#66CDAA">&nbsp;</td></tr><tr><td align="left"><b>MediumBlue</b>&nbsp;</td><td align="left"><b>#0000CD</b></td><td bgcolor="#0000CD">&nbsp;</td></tr><tr><td align="left"><b>MediumOrchid</b>&nbsp;</td><td align="left"><b>#BA55D3</b></td><td bgcolor="#BA55D3">&nbsp;</td></tr><tr><td align="left"><b>MediumPurple</b>&nbsp;</td><td align="left"><b>#9370DB</b></td><td bgcolor="#9370DB">&nbsp;</td></tr><tr><td align="left"><b>MediumSeaGreen</b>&nbsp;</td><td align="left"><b>#3CB371</b></td><td bgcolor="#3CB371">&nbsp;</td></tr><tr><td align="left"><b>MediumSlateBlue</b>&nbsp;</td><td align="left"><b>#7B68EE</b></td><td bgcolor="#7B68EE">&nbsp;</td></tr><tr><td align="left"><b>MediumSpringGreen</b>&nbsp;</td><td align="left"><b>#00FA9A</b></td><td bgcolor="#00FA9A">&nbsp;</td></tr><tr><td align="left"><b>MediumTurquoise</b>&nbsp;</td><td align="left"><b>#48D1CC</b></td><td bgcolor="#48D1CC">&nbsp;</td></tr><tr><td align="left"><b>MediumVioletRed</b>&nbsp;</td><td align="left"><b>#C71585</b></td><td bgcolor="#C71585">&nbsp;</td></tr><tr><td align="left"><b>MidnightBlue</b>&nbsp;</td><td align="left"><b>#191970</b></td><td bgcolor="#191970">&nbsp;</td></tr><tr><td align="left"><b>MintCream</b>&nbsp;</td><td align="left"><b>#F5FFFA</b></td><td bgcolor="#F5FFFA">&nbsp;</td></tr><tr><td align="left"><b>MistyRose</b>&nbsp;</td><td align="left"><b>#FFE4E1</b></td><td bgcolor="#FFE4E1">&nbsp;</td></tr><tr><td align="left"><b>Moccasin</b>&nbsp;</td><td align="left"><b>#FFE4B5</b></td><td bgcolor="#FFE4B5">&nbsp;</td></tr><tr><td align="left"><b>NavajoWhite</b>&nbsp;</td><td align="left"><b>#FFDEAD</b></td><td bgcolor="#FFDEAD">&nbsp;</td></tr><tr><td align="left"><b>Navy</b>&nbsp;</td><td align="left"><b>#000080</b></td><td bgcolor="#000080">&nbsp;</td></tr><tr><td align="left"><b>OldLace</b>&nbsp;</td><td align="left"><b>#FDF5E6</b></td><td bgcolor="#FDF5E6">&nbsp;</td></tr><tr><td align="left"><b>Olive</b>&nbsp;</td><td align="left"><b>#808000</b></td><td bgcolor="#808000">&nbsp;</td></tr><tr><td align="left"><b>OliveDrab</b>&nbsp;</td><td align="left"><b>#6B8E23</b></td><td bgcolor="#6B8E23">&nbsp;</td></tr><tr><td align="left"><b>Orange</b>&nbsp;</td><td align="left"><b>#FFA500</b></td><td bgcolor="#FFA500">&nbsp;</td></tr><tr><td align="left"><b>OrangeRed</b>&nbsp;</td><td align="left"><b>#FF4500</b></td><td bgcolor="#FF4500">&nbsp;</td></tr><tr><td align="left"><b>Orchid</b>&nbsp;</td><td align="left"><b>#DA70D6</b></td><td bgcolor="#DA70D6">&nbsp;</td></tr><tr><td align="left"><b>PaleGoldenRod</b>&nbsp;</td><td align="left"><b>#EEE8AA</b></td><td bgcolor="#EEE8AA">&nbsp;</td></tr><tr><td align="left"><b>PaleGreen</b>&nbsp;</td><td align="left"><b>#98FB98</b></td><td bgcolor="#98FB98">&nbsp;</td></tr><tr><td align="left"><b>PaleTurquoise</b>&nbsp;</td><td align="left"><b>#AFEEEE</b></td><td bgcolor="#AFEEEE">&nbsp;</td></tr><tr><td align="left"><b>PaleVioletRed</b>&nbsp;</td><td align="left"><b>#DB7093</b></td><td bgcolor="#DB7093">&nbsp;</td></tr><tr><td align="left"><b>PapayaWhip</b>&nbsp;</td><td align="left"><b>#FFEFD5</b></td><td bgcolor="#FFEFD5">&nbsp;</td></tr><tr><td align="left"><b>PeachPuff</b>&nbsp;</td><td align="left"><b>#FFDAB9</b></td><td bgcolor="#FFDAB9">&nbsp;</td></tr><tr><td align="left"><b>Peru</b>&nbsp;</td><td align="left"><b>#CD853F</b></td><td bgcolor="#CD853F">&nbsp;</td></tr><tr><td align="left"><b>Pink</b>&nbsp;</td><td align="left"><b>#FFC0CB</b></td><td bgcolor="#FFC0CB">&nbsp;</td></tr><tr><td align="left"><b>Plum</b>&nbsp;</td><td align="left"><b>#DDA0DD</b></td><td bgcolor="#DDA0DD">&nbsp;</td></tr><tr><td align="left"><b>PowderBlue</b>&nbsp;</td><td align="left"><b>#B0E0E6</b></td><td bgcolor="#B0E0E6">&nbsp;</td></tr><tr><td align="left"><b>Purple</b>&nbsp;</td><td align="left"><b>#800080</b></td><td bgcolor="#800080">&nbsp;</td></tr><tr><td align="left"><b>Red</b>&nbsp;</td><td align="left"><b>#FF0000</b></td><td bgcolor="#FF0000">&nbsp;</td></tr><tr><td align="left"><b>RosyBrown</b>&nbsp;</td><td align="left"><b>#BC8F8F</b></td><td bgcolor="#BC8F8F">&nbsp;</td></tr><tr><td align="left"><b>RoyalBlue</b>&nbsp;</td><td align="left"><b>#4169E1</b></td><td bgcolor="#4169E1">&nbsp;</td></tr><tr><td align="left"><b>SaddleBrown</b>&nbsp;</td><td align="left"><b>#8B4513</b></td><td bgcolor="#8B4513">&nbsp;</td></tr><tr><td align="left"><b>Salmon</b>&nbsp;</td><td align="left"><b>#FA8072</b></td><td bgcolor="#FA8072">&nbsp;</td></tr><tr><td align="left"><b>SandyBrown</b>&nbsp;</td><td align="left"><b>#F4A460</b></td><td bgcolor="#F4A460">&nbsp;</td></tr><tr><td align="left"><b>SeaGreen</b>&nbsp;</td><td align="left"><b>#2E8B57</b></td><td bgcolor="#2E8B57">&nbsp;</td></tr><tr><td align="left"><b>SeaShell</b>&nbsp;</td><td align="left"><b>#FFF5EE</b></td><td bgcolor="#FFF5EE">&nbsp;</td></tr><tr><td align="left"><b>Sienna</b>&nbsp;</td><td align="left"><b>#A0522D</b></td><td bgcolor="#A0522D">&nbsp;</td></tr><tr><td align="left"><b>Silver</b>&nbsp;</td><td align="left"><b>#C0C0C0</b></td><td bgcolor="#C0C0C0">&nbsp;</td></tr><tr><td align="left"><b>SkyBlue</b>&nbsp;</td><td align="left"><b>#87CEEB</b></td><td bgcolor="#87CEEB">&nbsp;</td></tr><tr><td align="left"><b>SlateBlue</b>&nbsp;</td><td align="left"><b>#6A5ACD</b></td><td bgcolor="#6A5ACD">&nbsp;</td></tr><tr><td align="left"><b>SlateGray</b>&nbsp;</td><td align="left"><b>#708090</b></td><td bgcolor="#708090">&nbsp;</td></tr><tr><td align="left"><b>Snow</b>&nbsp;</td><td align="left"><b>#FFFAFA</b></td><td bgcolor="#FFFAFA">&nbsp;</td></tr><tr><td align="left"><b>SpringGreen</b>&nbsp;</td><td align="left"><b>#00FF7F</b></td><td bgcolor="#00FF7F">&nbsp;</td></tr><tr><td align="left"><b>SteelBlue</b>&nbsp;</td><td align="left"><b>#4682B4</b></td><td bgcolor="#4682B4">&nbsp;</td></tr><tr><td align="left"><b>Tan</b>&nbsp;</td><td align="left"><b>#D2B48C</b></td><td bgcolor="#D2B48C">&nbsp;</td></tr><tr><td align="left"><b>Teal</b>&nbsp;</td><td align="left"><b>#008080</b></td><td bgcolor="#008080">&nbsp;</td></tr><tr><td align="left"><b>Thistle</b>&nbsp;</td><td align="left"><b>#D8BFD8</b></td><td bgcolor="#D8BFD8">&nbsp;</td></tr><tr><td align="left"><b>Tomato</b>&nbsp;</td><td align="left"><b>#FF6347</b></td><td bgcolor="#FF6347">&nbsp;</td></tr><tr><td align="left"><b>Turquoise</b>&nbsp;</td><td align="left"><b>#40E0D0</b></td><td bgcolor="#40E0D0">&nbsp;</td></tr><tr><td align="left"><b>Violet</b>&nbsp;</td><td align="left"><b>#EE82EE</b></td><td bgcolor="#EE82EE">&nbsp;</td></tr><tr><td align="left"><b>Wheat</b>&nbsp;</td><td align="left"><b>#F5DEB3</b></td><td bgcolor="#F5DEB3">&nbsp;</td></tr><tr><td align="left"><b>White</b>&nbsp;</td><td align="left"><b>#FFFFFF</b></td><td bgcolor="#FFFFFF">&nbsp;</td></tr><tr><td align="left"><b>WhiteSmoke</b>&nbsp;</td><td align="left"><b>#F5F5F5</b></td><td bgcolor="#F5F5F5">&nbsp;</td></tr><tr><td align="left"><b>Yellow</b>&nbsp;</td><td align="left"><b>#FFFF00</b></td><td bgcolor="#FFFF00">&nbsp;</td></tr><tr><td align="left"><b>YellowGreen</b>&nbsp;</td><td align="left"><b>#9ACD32</b></td><td bgcolor="#9ACD32">&nbsp;</td></tr></tbody></table>
参考
1.[HTML 颜色名](https://brokenpoems.cf/index.php/go/019/)]]></content>
      <categories>
        <category>Something</category>
      </categories>
  </entry>
  <entry>
    <title>提问的智慧(How To Ask Questions The Smart Way)</title>
    <url>/2020/07/21/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7(How%20To%20Ask%20Questions%20The%20Smart%20Way)/</url>
    <content><![CDATA[<!--markdown-->
<h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/pulls"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome"></a></p>
<p><strong>How To Ask Questions The Smart Way</strong></p>
<p>Copyright ? 2001,2006,2014 Eric S. Raymond, Rick Moen</p>
<p>本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p>
<p>原文网址：<a href="https://brokenpoems.cf/index.php/go/018/">https://www.catb.org/~esr/faqs/smart-questions.html</a></p>
<p>Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu</p>
<p>本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://brokenpoems.cf/index.php/go/017/">Gasolin</a> 所翻译版本的最新翻译；</p>
<p>协助指出翻译问题，<strong>请<a href="https://brokenpoems.cf/index.php/go/016/">发 Issue</a>，或直接<a href="https://brokenpoems.cf/index.php/go/015/">发 Pull Request</a> 给我。</strong></p>
<p>本文另有<a href="https://brokenpoems.cf/index.php/go/013/">繁體中文版</a>。</p>
<h2 id="原文版本历史"><a href="#原文版本历史" class="headerlink" title="原文版本历史"></a><a href="https://brokenpoems.cf/index.php/go/014/">原文版本历史</a></h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E5%A3%B0%E6%98%8E">声明</a></li>
<li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li>
<li><a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D">在提问之前</a></li>
<li><a href="#%E5%BD%93%E4%BD%A0%E6%8F%90%E9%97%AE%E6%97%B6">当你提问时</a><ul>
<li><a href="#%E6%85%8E%E9%80%89%E6%8F%90%E9%97%AE%E7%9A%84%E8%AE%BA%E5%9D%9B">慎选提问的论坛</a></li>
<li><a href="#stack-overflow">Stack Overflow</a></li>
<li><a href="#%E7%BD%91%E7%AB%99%E5%92%8C-irc-%E8%AE%BA%E5%9D%9B">网站和 IRC 论坛</a></li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8">第二步，使用项目邮件列表</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A1%AE%E7%9A%84%E6%A0%87%E9%A2%98">使用有意义且描述明确的标题</a></li>
<li><a href="#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D">使问题容易回复</a></li>
<li><a href="#%E7%94%A8%E6%B8%85%E6%99%B0%E6%AD%A3%E7%A1%AE%E7%B2%BE%E5%87%86%E5%B9%B6%E5%90%88%E6%B3%95%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AF%AD%E5%8F%A5">用清晰、正确、精准并合法语法的语句</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98">使用易于读取且标准的文件格式发送问题</a></li>
<li><a href="#%E7%B2%BE%E7%A1%AE%E5%9C%B0%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%B9%B6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9">精确地描述问题并言之有物</a></li>
<li><a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a></li>
<li><a href="#%E5%88%AB%E5%8A%A8%E8%BE%84%E5%A3%B0%E7%A7%B0%E6%89%BE%E5%88%B0-bug">别动辄声称找到 Bug</a></li>
<li><a href="#%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%E4%B8%8D%E8%83%BD%E4%BB%A3%E6%9B%BF%E4%BD%A0%E7%9A%84%E5%8A%9F%E8%AF%BE">低声下气不能代替你的功课</a></li>
<li><a href="#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E9%9D%9E%E4%BD%A0%E7%9A%84%E7%8C%9C%E6%B5%8B">描述问题症状而非你的猜测</a></li>
<li><a href="#%E6%8C%89%E5%8F%91%E7%94%9F%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E5%88%97%E5%87%BA%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6">按发生时间先后列出问题症状</a></li>
<li><a href="#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B">描述目标而不是过程</a></li>
<li><a href="#%E5%88%AB%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E7%94%B5%E9%82%AE%E5%9B%9E%E5%A4%8D">别要求使用私人电邮回复</a></li>
<li><a href="#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A1%AE%E7%9A%84%E8%A1%A8%E8%BE%BE%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82">清楚明确的表达你的问题以及需求</a></li>
<li><a href="#%E8%AF%A2%E9%97%AE%E6%9C%89%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E6%97%B6">询问有关代码的问题时</a></li>
<li><a href="#%E5%88%AB%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E7%9A%84%E9%97%AE%E9%A2%98%E8%B4%B4%E4%B8%8A%E6%9D%A5">别把自己家庭作业的问题贴上来</a></li>
<li><a href="#%E5%8E%BB%E6%8E%89%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%A5">去掉无意义的提问句</a></li>
<li><a href="#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A0%87%E9%A2%98%E5%86%99%E7%B4%A7%E6%80%A5">即使你很急也不要在标题写紧急</a></li>
<li><a href="#%E7%A4%BC%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%E8%80%8C%E4%B8%94%E6%9C%89%E6%97%B6%E8%BF%98%E5%BE%88%E6%9C%89%E5%B8%AE%E5%8A%A9">礼多人不怪，而且有时还很有帮助</a></li>
<li><a href="#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%90%8E%E5%8A%A0%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E">问题解决后，加个简短的补充说明</a></li>
</ul>
</li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E7%AD%94%E6%A1%88">如何解读答案</a><ul>
<li><a href="#rtfm-%E5%92%8C-stfw%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8%E4%BA%86">RTFM 和 STFW：如何知道你已完全搞砸了</a></li>
<li><a href="#%E5%A6%82%E6%9E%9C%E8%BF%98%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82">如果还是搞不懂</a></li>
<li><a href="#%E5%A4%84%E7%90%86%E6%97%A0%E7%A4%BC%E7%9A%84%E5%9B%9E%E5%BA%94">处理无礼的回应</a></li>
</ul>
</li>
<li><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E8%B4%A5%E8%80%85">如何避免扮演失败者</a></li>
<li><a href="#%E4%B8%8D%E8%AF%A5%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98">不该问的问题</a></li>
<li><a href="#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A0%A2%E9%97%AE%E9%A2%98">好问题与蠢问题</a></li>
<li><a href="#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94">如果得不到回答</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98">如何更好地回答问题</a></li>
<li><a href="#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90">相关资源</a></li>
<li><a href="#%E9%B8%A3%E8%B0%A2">鸣谢</a></li>
</ul>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：</p>
<p><strong>本指南不提供此项目的实际支持服务！</strong></p>
<p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p>
<p>如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="https://www.catb.org/~esr/faqs/hacker-howto.html">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p>
<p>不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<strong>好事</strong>；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p>
<p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p>
<p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p>
<p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p>
<p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p>
<p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p>
<p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p>
<p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p>
<p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p>
<p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="https://www.ietf.org/rfc/rfc1855.txt">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p>
<h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p>
<ol>
<li>尝试在你准备提问的论坛的旧文章中搜索答案。</li>
<li>尝试上网搜索以找到答案。</li>
<li>尝试阅读手册以找到答案。</li>
<li>尝试阅读常见问题文件（FAQ）以找到答案。</li>
<li>尝试自己检查或试验以找到答案。</li>
<li>向你身边的强者朋友打听以找到答案。</li>
<li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li>
</ol>
<p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p>
<p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 <a href="https://groups.google.com/">Google 论坛</a>和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p>
<p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p>
<p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p>
<p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p>
<p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p>
<p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p>
<h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p>
<ul>
<li>在与主题不合的论坛上贴出你的问题。</li>
<li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li>
<li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li>
<li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li>
</ul>
<p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p>
<p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p>
<p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别处发送，或者压根别发。</p>
<p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p>
<p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p>
<p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p>
<p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p>
<p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p>
<h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p>
<p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p>
<p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p>
<p>Stack Exchange 已经成长到<a href="https://stackexchange.com/sites">超过一百个网站</a>，以下是最常用的几个站：</p>
<ul>
<li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li>
<li>Stack Overflow 是问写程序有关的问题。</li>
<li>Server Fault 是问服务器和网管相关的问题。</li>
</ul>
<h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p>
<p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<strong>我们的</strong>版本”。</p>
<p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p>
<p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p>
<p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p>
<h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p>
<ul>
<li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li>
<li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li>
<li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li>
<li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li>
</ul>
<p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p>
<p>然而，如果你<strong>确信</strong>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p>
<p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p>
<h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p>
<p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p>
<blockquote>
<p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p>
</blockquote>
<blockquote>
<p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p>
</blockquote>
<blockquote>
<p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p>
</blockquote>
<p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p>
<p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p>
<p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p>
<p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p>
<p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p>
<p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p>
<h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="https://linuxmafia.com/faq/Mail/muas.html">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p>
<p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p>
<h3 id="用清晰、正确、精准并语法正确的语句"><a href="#用清晰、正确、精准并语法正确的语句" class="headerlink" title="用清晰、正确、精准并语法正确的语句"></a>用清晰、正确、精准并语法正确的语句</h3><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p>
<p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p>
<p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it&#39;s</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="https://en.wikipedia.org/wiki/Alan_Cox">Alan Cox</a> 也许可以这样做，但你不行）。</p>
<p>更白话的说，如果你写得像是个半文盲[译注：<a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E7%99%BD">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="https://zh.wikipedia.org/wiki/%E7%81%AB%E6%98%9F%E6%96%87">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p>
<p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p>
<p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p>
<blockquote>
<p>English is not my native language; please excuse typing errors.</p>
</blockquote>
<ul>
<li>英文不是我的母语，请原谅我的错字或语法。</li>
</ul>
<blockquote>
<p>If you speak $LANGUAGE, please email/PM me;<br>I may need assistance translating my question.</p>
</blockquote>
<ul>
<li>如果你说<strong>某语言</strong>，请寄信/私讯给我；我需要有人协助我翻译我的问题。</li>
</ul>
<blockquote>
<p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p>
</blockquote>
<ul>
<li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li>
</ul>
<blockquote>
<p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p>
</blockquote>
<ul>
<li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li>
</ul>
<h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p>
<ul>
<li>使用纯文字而不是 HTML (<a href="https://archive.birdhouse.org/etc/evilmail.html">关闭 HTML</a> 并不难）。</li>
<li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li>
<li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li>
<li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li>
<li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li>
<li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li>
<li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li>
<li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li>
</ul>
<p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p>
<h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul>
<li>仔细、清楚地描述你的问题或 Bug 的症状。</li>
<li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li>
<li>描述在提问前你是怎样去研究和理解这个问题的。</li>
<li>描述在提问前为确定问题而采取的诊断步骤。</li>
<li>描述最近做过什么可能相关的硬件或软件变更。</li>
<li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li>
</ul>
<p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p>
<p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p>
<p><a href="https://www.chiark.greenend.org.uk/~sgtatham/">Simon Tatham</a> 写过一篇名为《<a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p>
<h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p>
<p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p>
<h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p>
<p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p>
<p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p>
<p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p>
<h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p>
<p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p>
<p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p>
<h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p>
</blockquote>
<p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p>
<h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p>
<p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p>
<p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p>
<h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p>
<p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p>
</blockquote>
<p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p>
<h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p>
<p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p>
<p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p>
<h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p>
<p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p>
<p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p>
<p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p>
<h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p>
<p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a>一节）。</p>
<p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p>
<p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p>
<h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p>
<p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p>
<h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p>
<p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p>
<p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p>
<p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="https://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html">是或否类型的回答</a>。</p>
<h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p>
<p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p>
<p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p>
<p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p>
<h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p>
<p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p>
<p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p>
<p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p>
<h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p>
<p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p>
<p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p>
<p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p>
<p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p>
<p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p>
<p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p>
<p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p>
<h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="RTFM"></a></p>
<h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM （Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p>
<p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 **<a href="https://lmgtfy.com/">Google 是你的朋友</a>**！）</p>
<p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p>
<p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p>
<ul>
<li><strong>你需要的信息非常容易获得</strong>；</li>
<li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li>
</ul>
<p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p>
<h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p>
<p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p>
<h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p>
<p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p>
<p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p>
<p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。</p>
<p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="https://www.mit.edu/~jcb/tact.html">tact filters</a></strong>)。</p>
<p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p>
<h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p>
<p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p>
<p>熬过去，这很正常。事实上，它是有益健康且合理的。</p>
<p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p>
<p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p>
<p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p>
<p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p>
<p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p>
<p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p>
<p>也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p>
<h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p>
<p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p>
<p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p>
<p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p>
<p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p>
<p>问题：<a href="#q5">我的程序/设定/SQL 语句没有用</a></p>
<p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p>
<p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q9">我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</a></p>
<hr>
<p><a id="q1"></a></p>
<blockquote>
<p>问题：我能在哪找到 X 程序或 X 资源？</p>
</blockquote>
<p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="https://www.google.com/">Google</a> 吗？</p>
<p><a id="q2"></a></p>
<blockquote>
<p>问题：我怎样用 X 做 Y？</p>
</blockquote>
<p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p>
<p><a id="q3"></a></p>
<blockquote>
<p>问题：如何设定我的 shell 提示？？</p>
</blockquote>
<p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p>
<p><a id="q4"></a></p>
<blockquote>
<p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p>
</blockquote>
<p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p>
<p><a id="q5"></a></p>
<blockquote>
<p>问题：我的{程序/设定/SQL 语句}不工作</p>
</blockquote>
<p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p>
<ul>
<li>你还有什么要补充的吗？</li>
<li>真糟糕，希望你能搞定。</li>
<li>这关我有什么屁事？</li>
</ul>
<p><a id="q6"></a></p>
<blockquote>
<p>问题：我的 Windows 电脑有问题，你能帮我吗？</p>
</blockquote>
<p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p>
<p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p>
<p><a id="q7"></a></p>
<blockquote>
<p>问题：我的程序不会动了，我认为系统工具 X 有问题</p>
</blockquote>
<p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p>
<p><a id="q8"></a></p>
<blockquote>
<p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p>
</blockquote>
<p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="https://www.linux.org/groups/index.html">这儿</a>找到使用者群组的清单）。</p>
<p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p>
<p><a id="q9"></a></p>
<blockquote>
<p>问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</p>
</blockquote>
<p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p>
<h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p>
</blockquote>
<p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p>
</blockquote>
<p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p>
</blockquote>
<p>他觉得都是别人的错，这个傲慢自大的提问者。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p>
</blockquote>
<p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我的主机板有问题了，谁来帮我？</p>
</blockquote>
<p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p>
</blockquote>
<p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p>
<p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p>
<p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p>
<p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p>
<p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p>
<p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p>
<h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p>
<p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p>
<p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p>
<p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p>
<p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p>
<p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p>
<h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p>
<p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p>
<p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p>
<p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p>
<p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p>
<p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p>
<p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。</p>
<p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p>
<p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p>
<p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p>
<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="https://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix 系统和网络基本原理</a>。</p>
<p>当你发布软件或补丁时，试着按<a href="https://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。<br>转自GitHub:<a href="https://brokenpoems.cf/index.php/go/005/">提问的智慧</a></p>
]]></content>
      <categories>
        <category>Something</category>
      </categories>
      <tags>
        <tag>Reading</tag>
      </tags>
  </entry>
</search>
